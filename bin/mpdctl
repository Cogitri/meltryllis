#!/usr/bin/env perl
#
# This script was commented on-demand for a friend

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use Net::MPD;
use Pod::Usage;

pod2usage(2) if @ARGV == 0;

my %mpd_var = (
	host => 'localhost',
	port => '6600',
	pass => ''
);

my %mpd_action = (
	toggle_state => 0,
	next => 0,
	previous => 0,
	shuffle => 0,
	stop => 0,
	kill => 0,
	current_song => 0,
	reload => 0
);

my $mpd;
my @find = ('file');
my @play = ('file');
my @set;
my @get;

GetOptions('host=s' => \$mpd_var{host},
		   'port=i' => \$mpd_var{port},
		   'pass=s' => \$mpd_var{pass},
		   'toggle-state' => \$mpd_action{toggle_state},
		   'next' => \$mpd_action{next},
		   'previous' => \$mpd_action{previous},
		   'shuffle' => \$mpd_action{shuffle},
		   'stop' => \$mpd_action{stop},
		   'kill' => \$mpd_action{kill},
		   'current' => \$mpd_action{current_song},
		   'reload' => \$mpd_action{reload},
		   'set=s{2}' => \@set,
		   'get=s' => \@get,
		   'find=s{1,2}' => \@find,
		   'play:s{1,2}' => \@play,
		   'usage' => sub { pod2usage(2) },
		   'help' => sub { pod2usage(1) },
		   'man' => sub { pod2usage( -existatus => 0, -verbose => 2 ) } );

if ( length $mpd_var{pass} ) {
	$mpd = Net::MPD->connect("$mpd_var{pass}\@$mpd_var{host}:$mpd_var{port}");
} else {
	$mpd = Net::MPD->connect("$mpd_var{host}:$mpd_var{port}");
}

for ( keys %mpd_action ) {
	if ( $mpd_action{$_} ) {
		if ( $_ eq "toggle_state" ) {
			toggleState();
		} elsif ( $_ eq "current_song" ) {
			print getInfo('uri', $mpd->current_song());
		} elsif ( $_ eq "reload" ) {
			reload();
		} else {
			$mpd->$_();
		}
	}
}

foreach ( @get ) {
	print getInfo($_, $mpd->update_status());
	print "\n";
}

if ( scalar @find == "2" ) {
	print getInfo('uri', $mpd->playlist_search($find[0], $find[1]));
} elsif ( scalar @find == "3" ) {
	print getInfo('uri', $mpd->playlist_search($find[1], $find[2]));
}

if ( scalar @play == "2" ) {
	my $song_id = getInfo('Id', $mpd->playlist_search($play[0], $play[1]));
	$mpd->play_id($song_id);
} elsif ( scalar @play == "3" ) {
	my $song_id = getInfo('Id', $mpd->playlist_search($play[1], $play[2]));
	$mpd->play_id($song_id);
}

sub getInfo {
	my $attr = shift;
	my $attributes = shift;

	my $info = @$attributes{$attr};
	if ( $attr eq 'uri' ) {
		$info =~s|.[^.]*$||;
	}
	if ( length $info ) {
		return $info
	} else {
		return "Couldn't find info $attr"
	}
}

sub toggleState {
	my $info = $mpd->update_status();
	my %action = (
		play => "pause",
		pause => "pause",
		stop => "play"
	);
	my $state = $action{$$info{'state'}};
	$mpd->$state();
}

sub reload {
	$mpd->clear();
	$mpd->rescan();
	my @all_songs = $mpd->list_all();
	foreach ( values @all_songs ) {
		my $name = $ { $_ } { 'uri' };
		$mpd->add($name);
	}
}

__END__

=head1 MPDCTL

mpdctl - a controller for MPD written in perl using Net::MPD and Getopt::Long

=head1 SYNOPSIS

=for pod2usage:

B<mpdctl> <I<OPTIONS>> [I<ARGS...>]

--help or --man for OPTIONS

=head1 OPTIONS

=for pod2usage:

=over

=item B<--host> I<hostname>

pass hostname to connect to MPD if no hostname is passed it is assumed to be
localhost

=item B<--port> I<port>

pass port number to connect to MPD if no port number is passed it is assumed
to be 6600

=item B<--password> I<pass>

pass password to connect to MPD if no password is passed mpdctl tries to
connect without password authentication

=item B<--toggle>

toggle between playing and paused, if it's playing the state is set to paused
if it's paused it is set to playing, if it's stopped it is set to playing


=item B<--next> B<--previous>

start playing next and previous songs in the playlist respectively

=item B<--shuffle>

shuffle song order in the current playlist

=item B<--stop>

set state of MPD daemon to stopped, B<--toggle> can be used to set it to
paused

=item B<--kill>

kill MPD daemon, this is equivalent of running I<mpd --kill> on a shell

=item B<--current>

print name of current song by getting it's uri (filepath) and stripping
the extension, it shows the file being played even if the player is
paused or stopped

=item B<--reload>

perform a series of actions to reload the playlist

1. clear current playlist
2. rescan current Music directory
3. add all files found in the current Music directory

=item B<--get> I<variable>

gets current status of a variable from MPD, the values accepted are

volume,repeat,random,single,consume,playlis,playlist_length,state,song,song_Id,next_song,next_song_id,time,elapsed,bitrate,crossfade,mix_ramp_db,mix_ramp_delay,audio,updating_db,error,replay_gain_mode

=item B<--find> I<[tag]> I<<string>>

matches a part of the string to a tag, by default the tag 'file' is used
to match against the fliename but any tag can be used when provided 2 arguments
it returns the uri (filepath) of the music with the extension stripped

=item B<--play> I<[tag]> I<<string>>

same as --find but instead of displaying the song filename, it plays it

=item B<--help>

shows usage and options

=item B<--man>

shows usage and options but as a manpage

=item B<--usage>

shows usage section

=back

=cut
