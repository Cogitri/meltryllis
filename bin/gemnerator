#!/usr/bin/env dash
#
# gemnerator <GEMS...> - Make templates for gems from rubygems
#
# Depends on:
# - xdistdir (xtools)
# - curl
# - jq
#

# Function: get_dep
# Description: Function that transforms a Rubygems dependency
#  specification into a Void Linux template equivalent
# Input: Line containing at least 3 elements separated by whitespace
#  those elements are the name of the pacakge, the version 
#  comparator and the version being compared against
# Examples:
#  get_dep rake >= 0 -> rake
#  get_dep test-unit ~> 2.0 -> ruby-test-unit>=2.0 ruby-test-unit<3.0
get_dep() {
	pkg="$(echo "$1" | cut -d ' ' -f1)"
	cmp="$(echo "$1" | cut -d ' ' -f2)"
	ver="$(echo "$1" | cut -d ' ' -f3)"

	local fdeps

	# Deal with the case where there are multiple version
	# specifiers like: gem >= 1.0, < 2.0
	if [ -z "${ver##*,}" ]; then
		# Remove comma from version
		ver="${ver%%,*}"

		# Get the second specifier and version
		cmpr="$(echo "$1" | cut -d ' ' -f4)"
		vers="$(echo "$1" | cut -d ' ' -f5)"

		# Call the function again, this time we know there is
		# multiple version specifiers
		printf "%s" "$(get_dep "${pkg} ${cmpr} ${vers}") "

	fi

	# Deal with all ruby version operators
	case "$cmp" in
		'>'|'<'|'<='|'>=') 
			if [ "$ver" = "0" -a "$cmp" = ">=" ]; then
				printf "%s" "$pkg"
			else
				printf "%s%s%s" "$pkg" "$cmp" "$ver"
			fi
			;;
		'~>') 
			# The ~> comparator is meant to allow only version updates
			# up to the first version specifier
			# ~> 2.0.3 means >= 2.0.3 ∩ < 2.1
			# ~> 2.1 means >= 2.1 ∩ > 3.0
			# ~> 2 means >= 2 ∩ > 3 (Super pessimistic anti-pattern)
			fdeps="${pkg}>=${ver}"
			ver="${ver%.*}"
			lver="${ver##*.}"
			if [ ${#ver} -eq 1 ]; then
				ver=""
			else
				ver="${ver%.*}."
			fi
			fdeps="$fdeps ${pkg}<${ver}$((lver + 1)).0"
			
			printf "%s" "$fdeps"
			;;
	esac
}

gem="${1?'no gem name given'}" # Name from rubygems
pkgname="ruby-$1" # Name for the template

# Get our xdistdir
templatedir=$(xdistdir)/srcpkgs/$pkgname

# Don't try to package gems that are part of ruby
dist_gems="bigdecimal json minitest net-telnet psych rake rdoc test-unit"
if [ -z "${dist_gems##*$gem*}" ]; then
	printf "[WARN] %s part of ruby.\\n" "$gem"
	return 0
fi

# We expect this script to run recursively and walk the whole
# dependency tree of a gem so just return when a package is
# already packaged
if [ -d "$templatedir" ]; then
	printf "[WARN] %s already packaged.\\n" "$gem"
	return 0
fi

# Use the rubygems API to get all information in json format
# we will use 'jq' to parse it
data="$(curl --silent https://rubygems.org/api/v1/gems/${gem}.json)"

if [ -z "$data" ]; then
	printf "[ERR] Can't fetch data for %s.\\n" "$gem"
	return 1
fi

# Get the values from the JSON data given to us
version="$(printf "%s" "$data" | jq -r .version)"

# Depends can be multiple values and due to jq we get them in multiple lines, use paste to
# join them with space between them.
deps="$(printf "%s" "$data" |
		jq -r '.dependencies.runtime | .[] | {name, requirements} | .[]' |
		paste -d " " - -)"

# Try to get description from the summary field
short_desc="$(printf "%s" "$data" | jq -r '.summary // empty')"

# Licenses can be mulitple values and due to jq we get them in multiple lines, but unlike
# depends we need to have a comma-space separating them, so also pass a sed after using
# paste to join the lines
licenses="$(printf "%s" "$data" |
			jq -r 'select(.licenses != null).licenses | .[]' |
			paste -sd ' ' |
			sed 's| |, |g')"

# If homepage is null, which it can be, then return empty which is an empty string
homepage="$(printf "%s" "$data" | jq -r '.homepage_uri // empty')"

# If homepage is an empty string then we recieved null, we set it to the rubygems
# page of the gem
if [ -z "$homepage" ]
then
	homepage="https://rubygems.org/gems/$gem"
fi

# Get the sha256sum value for the gem
checksum="$(printf "%s" "$data" | jq -r '.sha //empty')"

# Run gemnerator against each dependency, this is recursive and it will walk
# the whole dependency chain
depends=""

IFS="
" ; for d in $deps
do
	pkg="$(echo "$d" | cut -d ' ' -f1)"
	ver="$(echo "$d" | cut -d ' ' -f2-)"
	"$0" "$pkg" || printf "[WARN] Failed to make template for %s.\\n" "$pkg"
	if [ -z "${dist_gems##*$pkg*}" ]; then
		continue
	fi
	depends="${depends} ruby-$(get_dep $d)"
done

required_licenses="MIT ISC BSD"
# Check if license requires usage of vlicense
if [ -z "${required_licenses##*$license*}" ]; then
	vlicense="
post_install() {
	vlicense LICENSE
}
"
fi

# Everything seems ready to go!
printf "[OK] Creating template for %s.\\n" "$gem"

mkdir -p "$templatedir" 
# Output our template
cat >"$templatedir/template" <<EOF
# Template file for '$pkgname'
pkgname=$pkgname
version=$version
revision=1
noarch=yes
build_style=gem
$(test -z "$depends" || echo depends=\"$depends\" | sed 's|" |"|')
short_desc="$short_desc"
maintainer="$(git config user.name) <$(git config user.email)>"
license="$licenses"
homepage="$homepage"
checksum=$checksum
$(test -z "$vlicense" || echo "$vlicense")
EOF

# vim: set syn=sh :
